package com.test.client;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.nio.file.Files;
import java.util.Map;

import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.client.api.ContentResponse;
import org.eclipse.jetty.client.api.Request;
import org.eclipse.jetty.client.util.BytesContentProvider;
import org.eclipse.jetty.client.util.StringContentProvider;
import org.eclipse.jetty.http.HttpHeader;
import org.eclipse.jetty.http.HttpMethod;
import org.eclipse.jetty.util.ByteArrayOutputStream2;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

public class MyTestClient {

	private String BASE_URL = "http://127.0.0.1:8080";
	
	public static void main(String[] args) throws Exception {

		MyTestClient myClient = new MyTestClient();
		
		//EX1-1 : GET 단순요청 : 날짜조회  
		String pathParam1_1 = "/requestDate";
		String resStr1_1 = myClient.requestDate(pathParam1_1);
		System.out.println("CLIENT : EX1-1 결과 : " + resStr1_1);
		
		//Ex1-4 : GET 파일한개 다운로드
		String pathParam1_2 = "/requestFile";
		String resStr1_2 = myClient.requestBinaryFile(pathParam1_2);
		System.out.println("CLIENT : EX1-4 결과 : " + resStr1_2);
		
		//Ex1-5 : 파일여러개를 요청하여 수신처리
		String pathParam1_3 = "/requestFiles";
		int resStatus = myClient.requestBinaryFiles(pathParam1_3);
		System.out.println("CLIENT : EX1-5 결과 : " + resStatus);
				
		//EX2-1 : POST로 JSON 파일 업로드 
		String pathParam2_1 = "/fileList";
		String strFileList = getFileList();
		String resStr2_1 = myClient.requestFileSend(pathParam2_1, strFileList);
		System.out.println("CLIENT : EX2-1 결과 : " + resStr2_1);
		
		//EX2-2 : POST로 파일업로드 (미구현)
		String pathParam2_2 = "/upload";
		int resStr2_2 = 0;
		resStr2_2 = myClient.uploadFiles(pathParam2_2);
		System.out.println("CLIENT : EX2-1 결과: " + resStr2_2 +"");
		
	}

	private int requestBinaryFiles(String pathParam) throws Exception {
		
		HttpClient httpClient = new HttpClient();
		httpClient.start();
		
		Request request = httpClient.newRequest(BASE_URL + pathParam);
		request.method(HttpMethod.GET);

		ContentResponse contentRes = request.send();
		byte [] myByteArray = contentRes.getContent();
		System.out.println(myByteArray.length);
		try {
			ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(myByteArray);
			ObjectInputStream in = new ObjectInputStream(byteArrayInputStream);
			
			Map<String, byte[]> data = (Map<String, byte[]>) in.readObject();
			
			for(String key : data.keySet()) {
				FileOutputStream fos = new FileOutputStream("C:\\mytest\\client\\" + key);
				fos.write(data.get(key));
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

	    httpClient.stop();
	
		return contentRes.getStatus();
	}

	private String requestBinaryFile(String pathParam) throws Exception {
		
		String resStr = "";
		
		HttpClient httpClient = new HttpClient();
		httpClient.start();

		Request request = httpClient.newRequest(BASE_URL + pathParam);
		request.method(HttpMethod.GET);
		
		ContentResponse contentRes = request.send();
        byte [] myByteArray = contentRes.getContent();
        try (FileOutputStream fos = new FileOutputStream("C:\\mytest\\client\\rcv_image.png")) {
            fos.write(myByteArray);
        }
        
        httpClient.stop();
        
		return null;
	}

	private String requestFileSend(String pathParam, String fileListStr) throws Exception {
		
		String resStr = "";
			
		HttpClient httpClient = new HttpClient();
		httpClient.start();
		
		Request request = httpClient.newRequest(BASE_URL + pathParam);
		request.method(HttpMethod.POST);
		request.header(HttpHeader.CONTENT_TYPE, "application/json");
		request.content(new StringContentProvider(fileListStr,"utf-8"));

		ContentResponse contentRes = request.send();
		System.out.println(contentRes.getContentAsString());
		httpClient.stop();
		
		return resStr;
	}

	private String requestDate(String pathParam) throws Exception {

		String resStr = "";
		
		HttpClient httpClient = new HttpClient();
		httpClient.start();

		Request request = httpClient.newRequest(BASE_URL + pathParam);
		request.method(HttpMethod.GET);
		
		ContentResponse contentRes = request.send();
		resStr = contentRes.getContentAsString();
		
		httpClient.stop();
		
		return resStr;
	}
	
	private static String getFileList() {

        Gson gson = new Gson();
        JsonObject jsonObject = new JsonObject();

        jsonObject.addProperty("Folder", "Input");
        JsonArray jsonArray = new JsonArray();
        
        File directory = new File("C:\\sp_workspace\\sp_java_test");
        File[] fileList = directory.listFiles();

        for (File file : fileList) {
        	jsonArray.add(file.getName());
        } 

        jsonObject.add("files", jsonArray);
        String res = jsonObject.toString();

        return res; 

    }
	
	
	private static File[] getFileList(String path) {
		File dir = new File(path);
		File files[] = dir.listFiles();
		return files;
	}
	
	public final static String CONTENT_BOUNDARY = "<--(*)(*)-->"; // Spaceship!
	 
	private int uploadFiles(String pathParam) throws Exception {
		
		File dir = new File("c://mytest/client");
		File files[] = dir.listFiles();
		
		for(File file : files) {
			System.out.println(file.getAbsolutePath());
		}
		
		HttpClient httpClient = new HttpClient();
		httpClient.start();
		
		Request request = httpClient.newRequest(BASE_URL + pathParam);
		request.method(HttpMethod.POST);
		request.header(HttpHeader.CONTENT_TYPE, "multipart/form-data; boundary=");
		//request.file(files[0].toPath());
		request.content(new BytesContentProvider(getFileRequestContent(files)));

		ContentResponse contentRes = request.send();
		
		return contentRes.getStatus();

	}

	public static byte[] getFileRequestContent(File[] files) throws IOException {
	    String content = "--" + CONTENT_BOUNDARY + "\r\n" + "Content-Disposition: form-data; name=\"" + files[0].getName() + "\"; filename=\"" + files[0].getName() + "\"\r\n"+
	            "Content-Type: application/octet-stream;\r\n\r\n";
	 
	    byte[] fileContent = Files.readAllBytes(files[0].toPath());
	 
	    ByteArrayOutputStream stream = new ByteArrayOutputStream2();
	    stream.write(content.getBytes());
	 
	    stream.write(fileContent);
	 
	    String finish = "\r\n";
	    finish += "--" + CONTENT_BOUNDARY + "--\r\n\r\n";
	 
	    stream.write(finish.getBytes());
	    stream.flush();
	 
	    return stream.toByteArray();
	}
	

}
