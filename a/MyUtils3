import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.eclipse.jetty.client.HttpClient;
import org.eclipse.jetty.client.api.ContentResponse;
import org.eclipse.jetty.client.api.Request;
import org.eclipse.jetty.http.HttpMethod;
import com.google.gson.Gson;
import com.lgcns.test.RoutingRuleInfo.RouteInfo;

public class MyUtils {

	static MyObject3 myObject3;
	
	public static List<String> readLineOfFile(String fileName) throws IOException{
		List<String> readStrings = new ArrayList<String>();

		if(!fileName.endsWith(".txt")) {
			fileName = fileName + ".txt";
		}
		
		BufferedReader reader = new BufferedReader(new FileReader(fileName));

		String str;
		while ((str = reader.readLine()) != null) {
			readStrings.add(str);
		}

		reader.close();

		return readStrings;
	}
	

	public static String readAllOfFile(String fileName){
		StringBuffer sb = new StringBuffer();
		
		try {
			BufferedReader reader = new BufferedReader(new FileReader(fileName));

			String str;
			while ((str = reader.readLine()) != null) {
				sb.append(str);
			}

			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				Thread.sleep(100000);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

		return sb.toString();
	}
	
	/**
	 * Proxy 서버 기동시 파라키터로 받은 파일명으로 routing정보 읽기
	 * @param fileName
	 * @return
	 * @throws IOException
	 */
	public static MyObject3 readRoutingRuleFile(String fileName) throws IOException {
		Gson gson = new Gson();
		MyObject3 myObject3 = null;
		try {
			
			// 대상 파일의 내용을 문자열로 읽어온다.
			String fileContents = readAllOfFile(fileName);
			System.out.println(fileContents);
			myObject3 = gson.fromJson(fileContents, MyObject3.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return myObject3;
	}
	
	/**
	 * CLIENT : 기본적인 GET 메소드를 통한 요청
	 * @param uri
	 * @return
	 */
	public static ContentResponse requestBase(String uri, HttpMethod httpMethod) {
		
		HttpClient httpClient;
		ContentResponse contentRes = null;
		
		try {
			httpClient = new HttpClient();
			httpClient.start();
			
			Request request = httpClient.newRequest(uri);
			request.method(httpMethod);
			
			contentRes = request.send();
			
		} catch (Exception e) {
			e.printStackTrace();	
		}
		
		return contentRes;
	}
	
	public static ContentResponse requestByGetMethod(String targetUri) {
		
		return requestBase(targetUri, HttpMethod.GET);
	}

	public static ContentResponse requestByPostMethodWithoutBody(String targetUri) {
		
		return requestBase(targetUri, HttpMethod.POST);
	}


	public static int findServerPort(String nm) throws IOException {
		
		int port;
		String fileNm = nm + ".json";
		String fileContents = MyUtils3.readAllOfFile(fileNm);
		MyObject3 myObject3 = MyUtils3.convertToObjFromJsonString(fileContents);
		
		port = myObject3.getPort();
		
		return port;
		
	}
	
	public static int findServerPortByFile(String fileNm) throws IOException {
		int port;
		String fileContents = MyUtils3.readAllOfFile(fileNm);
		MyObject3 myObject3 = convertToObjectFromString(fileContents, MyObject3.class);
		port = myObject3.getPort();
		
		return port;
		
	}
	
	public static String findTargetServiceUrl(String reqURI, String jsonStr) throws IOException {
		
		String targetURL = null;
		MyObject3 myObject3 = convertToObjectFromString(jsonStr, MyObject3.class);
		for(RouteInfo routeInfo : myObject3.getRoutes()) {
			if(routeInfo.getPathPrefix().equals(reqURI)) {
				targetURL = routeInfo.getUrl();
			}
		}
		
		return targetURL;
	}
	
	public static MyObject3 convertToObjFromJsonString(String jsonStr) throws IOException {
		
		Gson gson = new Gson();
		MyObject3 myObject3 = gson.fromJson(jsonStr, MyObject3.class);
		
		return myObject3;
	}

	public static Map<String, String> convertFromJsonStringToMap(String jsonStr) {
		Gson gson = new Gson();
		Map<String, String> map = gson.fromJson(jsonStr, Map.class);
		return map;
	}

	public static String convertToJsonStringFromObj(MyObject3 myObject3) {
		String jsonStr = null;
		Gson gson = new Gson();
		jsonStr = gson.toJson(myObject3);
		System.out.println("jsonStr : " + jsonStr);
		return jsonStr;
	}

	public static MyObject3 convertToObjectFromString(String jsonStr, Class<MyObject3> claz) {
		Gson gson = new Gson();
		RoutingRuleInfo routingRuleInfo = null;
		
		// 대상 파일의 내용을 문자열로 읽어온다.
		
		myObject3 = gson.fromJson(jsonStr, MyObject3.class);
		return myObject3;
	}


	public static void wirteFile(String fileName, String targetContents, boolean mode) throws IOException{
		
		File file = new File("C:\\workspace\\test\\s\\" + fileName);
	
		try {
		    FileWriter writer = new FileWriter(file,true);
		    writer.write(targetContents);
		    writer.close();
		} catch (IOException e) {
		    e.printStackTrace();
		}
	}	
}
